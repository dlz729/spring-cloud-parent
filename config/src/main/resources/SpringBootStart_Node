Spring Boot的启动类注解@SpringBootApplication，包含@SpringBootConfiguration（点开发现里面应用了@Configuration）、
@ComponentScan和@EnableAutoConfiguration
1、@Configuration：
    任何一个标注了@Configuration的Java类定义都是一个JavaConfig配置类，它的搭档注解@Bean，使用这两个注解就可以创建一个
简单的Spring配置类，可以用来替代相应的xml配置文件。
2、@ComponentScan：
    @ComponentScan这个注解对应XML配置中的元素，功能是自动扫描并加载符合条件的组件（比如@Component和@Repository等）
或者bean定义，最终将这些bean定义加载到IoC容器中。
    我们可以通过basePackages等属性来细粒度的定制@ComponentScan自动扫描的范围，如果不指定，则默认Spring框架实现会从声明
componentScan所在类的package进行扫描。注：所以SpringBoot的启动类最好是放在root package下，因为默认不指定basePackages。
3、@EnableAutoConfiguration
    @EnableAutoConfiguration的理念和做事方式其实一脉相承，简单概括一下就是，借助@Import的支持，收集和注册特定场景相关的bean定义。
    @EnableAutoConfiguration主要包含@AutoConfigurationPackage和@Import(EnableAutoConfigurationImportSelector.class)注解
    其中，最关键的要属@Import(EnableAutoConfigurationImportSelector.class)，借助EnableAutoConfigurationImportSelector，
@EnableAutoConfiguration可以帮助SpringBoot应用将所有符合条件的@Configuration配置都加载到当前SpringBoot创建并使用的IoC容器。
就像一只“八爪鱼”一样，借助于Spring框架原有的一个工具类：SpringFactoriesLoader的支持，@EnableAutoConfiguration可以智能的自动配置功效才得以大功告成！
    从SpringBoot的autoconfigure依赖包中的META-INF/spring.factories配置文件中摘录的一段内容，可以很好地说明问题。
所以，@EnableAutoConfiguration自动配置的魔法骑士就变成了：从classpath中搜寻所有的META-INF/spring.factories配置文件，
并将其中org.springframework.boot.autoconfigure.EnableutoConfiguration对应的配置项通过反射（Java Refletion）
实例化为对应的标注了@Configuration的JavaConfig形式的IoC容器配置类，然后汇总为一个并加载到IoC容器。